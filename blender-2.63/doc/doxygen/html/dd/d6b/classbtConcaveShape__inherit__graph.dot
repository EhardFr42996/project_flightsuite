digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{btConcaveShape\n|# m_collisionMargin\l|+ btConcaveShape()\l+ ~btConcaveShape()\l+ processAllTriangles()\l+ getMargin()\l+ setMargin()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{btCollisionShape\n|# m_shapeType\l# m_userPointer\l|+ btCollisionShape()\l+ ~btCollisionShape()\l+ getAabb()\l+ getBoundingSphere()\l+ getAngularMotionDisc()\l+ getContactBreakingThreshold()\l+ calculateTemporalAabb()\l+ isPolyhedral()\l+ isConvex2d()\l+ isConvex()\l+ isNonMoving()\l+ isConcave()\l+ isCompound()\l+ isSoftBody()\l+ isInfinite()\l+ setLocalScaling()\l+ getLocalScaling()\l+ calculateLocalInertia()\l+ getName()\l+ getShapeType()\l+ setMargin()\l+ getMargin()\l+ setUserPointer()\l+ getUserPointer()\l+ calculateSerializeBufferSize()\l+ serialize()\l+ serializeSingleShape()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/dd7/classbtCollisionShape.html",tooltip="The btCollisionShape class provides an interface for collision shapes that can be shared among btColl..."];
  Node1 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{btEmptyShape\n|# m_localScaling\l|+ btEmptyShape()\l+ ~btEmptyShape()\l+ getAabb()\l+ setLocalScaling()\l+ getLocalScaling()\l+ calculateLocalInertia()\l+ getName()\l+ processAllTriangles()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d3a/classbtEmptyShape.html"];
  Node1 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{btGImpactShapeInterface\n|# m_localAABB\l# m_needs_update\l# localScaling\l# m_box_set\l|+ btGImpactShapeInterface()\l+ updateBound()\l+ getAabb()\l+ postUpdate()\l+ getLocalBox()\l+ getShapeType()\l+ setLocalScaling()\l+ getLocalScaling()\l+ setMargin()\l+ rayTest()\l+ processAllTriangles()\l+ getGImpactShapeType()\l+ getBoxSet()\l+ hasBoxSet()\l+ getPrimitiveManager()\l+ getNumChildShapes()\l+ childrenHasTransform()\l+ needsRetrieveTriangles()\l+ needsRetrieveTetrahedrons()\l+ getBulletTriangle()\l+ getBulletTetrahedron()\l+ lockChildShapes()\l+ unlockChildShapes()\l+ getPrimitiveTriangle()\l+ getChildAabb()\l+ getChildShape()\l+ getChildShape()\l+ getChildTransform()\l+ setChildTransform()\l# calcLocalAABB()\l* getGImpactShapeType()\l* getBoxSet()\l* hasBoxSet()\l* getPrimitiveManager()\l* getNumChildShapes()\l* childrenHasTransform()\l* needsRetrieveTriangles()\l* needsRetrieveTetrahedrons()\l* getBulletTriangle()\l* getBulletTetrahedron()\l* lockChildShapes()\l* unlockChildShapes()\l* getPrimitiveTriangle()\l* getChildAabb()\l* getChildShape()\l* getChildShape()\l* getChildTransform()\l* setChildTransform()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d18/classbtGImpactShapeInterface.html",tooltip="Base class for gimpact shapes."];
  Node4 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{btGImpactCompoundShape\n|# m_primitive_manager\l# m_childTransforms\l# m_childShapes\l|+ btGImpactCompoundShape()\l+ ~btGImpactCompoundShape()\l+ childrenHasTransform()\l+ getPrimitiveManager()\l+ getCompoundPrimitiveManager()\l+ getNumChildShapes()\l+ addChildShape()\l+ addChildShape()\l+ getChildShape()\l+ getChildShape()\l+ getChildAabb()\l+ getChildTransform()\l+ setChildTransform()\l+ needsRetrieveTriangles()\l+ needsRetrieveTetrahedrons()\l+ getBulletTriangle()\l+ getBulletTetrahedron()\l+ calculateLocalInertia()\l+ getName()\l+ getGImpactShapeType()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d80/classbtGImpactCompoundShape.html",tooltip="btGImpactCompoundShape allows to handle multiple btCollisionShape objects at once"];
  Node4 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{btGImpactMeshShape\n|# m_mesh_parts\l- m_meshInterface\l|+ btGImpactMeshShape()\l+ ~btGImpactMeshShape()\l+ getMeshInterface()\l+ getMeshInterface()\l+ getMeshPartCount()\l+ getMeshPart()\l+ getMeshPart()\l+ setLocalScaling()\l+ setMargin()\l+ postUpdate()\l+ calculateLocalInertia()\l+ getPrimitiveManager()\l+ getNumChildShapes()\l+ childrenHasTransform()\l+ needsRetrieveTriangles()\l+ needsRetrieveTetrahedrons()\l+ getBulletTriangle()\l+ getBulletTetrahedron()\l+ lockChildShapes()\l+ unlockChildShapes()\l+ getChildAabb()\l+ getChildShape()\l+ getChildShape()\l+ getChildTransform()\l+ setChildTransform()\l+ getGImpactShapeType()\l+ getName()\l+ rayTest()\l+ processAllTriangles()\l+ calculateSerializeBufferSize()\l+ serialize()\l# buildMeshParts()\l# calcLocalAABB()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d39/classbtGImpactMeshShape.html",tooltip="This class manages a mesh supplied by the btStridingMeshInterface interface."];
  Node4 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{btGImpactMeshShapePart\n|# m_primitive_manager\l|+ btGImpactMeshShapePart()\l+ btGImpactMeshShapePart()\l+ ~btGImpactMeshShapePart()\l+ childrenHasTransform()\l+ lockChildShapes()\l+ unlockChildShapes()\l+ getNumChildShapes()\l+ getChildShape()\l+ getChildShape()\l+ getChildTransform()\l+ setChildTransform()\l+ getPrimitiveManager()\l+ getTrimeshPrimitiveManager()\l+ calculateLocalInertia()\l+ getName()\l+ getGImpactShapeType()\l+ needsRetrieveTriangles()\l+ needsRetrieveTetrahedrons()\l+ getBulletTriangle()\l+ getBulletTetrahedron()\l+ getVertexCount()\l+ getVertex()\l+ setMargin()\l+ getMargin()\l+ setLocalScaling()\l+ getLocalScaling()\l+ getPart()\l+ processAllTriangles()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d92/classbtGImpactMeshShapePart.html",tooltip="This class manages a sub part of a mesh supplied by the btStridingMeshInterface interface."];
  Node1 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{btHeightfieldTerrainShape\n|+ m_heightfieldDataUnsignedChar\l+ m_heightfieldDataShort\l+ m_heightfieldDataFloat\l+ m_heightfieldDataUnknown\l# m_localAabbMin\l# m_localAabbMax\l# m_localOrigin\l# m_heightStickWidth\l# m_heightStickLength\l# m_minHeight\l# m_maxHeight\l# m_width\l# m_length\l# m_heightScale\l# @260\l# m_heightDataType\l# m_flipQuadEdges\l# m_useDiamondSubdivision\l# m_upAxis\l# m_localScaling\l|+ btHeightfieldTerrainShape()\l+ btHeightfieldTerrainShape()\l+ ~btHeightfieldTerrainShape()\l+ setUseDiamondSubdivision()\l+ getAabb()\l+ processAllTriangles()\l+ calculateLocalInertia()\l+ setLocalScaling()\l+ getLocalScaling()\l+ getName()\l# getRawHeightFieldValue()\l# quantizeWithClamp()\l# getVertex()\l# initialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d17/classbtHeightfieldTerrainShape.html",tooltip="btHeightfieldTerrainShape simulates a 2D heightfield terrain"];
  Node1 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{btSoftBodyCollisionShape\n|+ m_body\l|+ btSoftBodyCollisionShape()\l+ ~btSoftBodyCollisionShape()\l+ processAllTriangles()\l+ getAabb()\l+ setLocalScaling()\l+ getLocalScaling()\l+ calculateLocalInertia()\l+ getName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d5a/classbtSoftBodyCollisionShape.html"];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{btTriangleMeshShape\n|# m_localAabbMin\l# m_localAabbMax\l# m_meshInterface\l|+ ~btTriangleMeshShape()\l+ localGetSupportingVertex()\l+ localGetSupportingVertexWithoutMargin()\l+ recalcLocalAabb()\l+ getAabb()\l+ processAllTriangles()\l+ calculateLocalInertia()\l+ setLocalScaling()\l+ getLocalScaling()\l+ getMeshInterface()\l+ getMeshInterface()\l+ getLocalAabbMin()\l+ getLocalAabbMax()\l+ getName()\l# btTriangleMeshShape()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d47/classbtTriangleMeshShape.html",tooltip="The btTriangleMeshShape is an internal concave triangle mesh interface. Don&#39;t use this class directly..."];
}
