digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{btConeTwistConstraint\n|- m_jac\l- m_rbAFrame\l- m_rbBFrame\l- m_limitSoftness\l- m_biasFactor\l- m_relaxationFactor\l- m_damping\l- m_swingSpan1\l- m_swingSpan2\l- m_twistSpan\l- m_fixThresh\l- m_swingAxis\l- m_twistAxis\l- m_kSwing\l- m_kTwist\l- m_twistLimitSign\l- m_swingCorrection\l- m_twistCorrection\l- m_twistAngle\l- m_accSwingLimitImpulse\l- m_accTwistLimitImpulse\l- m_angularOnly\l- m_solveTwistLimit\l- m_solveSwingLimit\l- m_useSolveConstraintObsolete\l- m_swingLimitRatio\l- m_twistLimitRatio\l- m_twistAxisA\l- m_bMotorEnabled\l- m_bNormalizedMotorStrength\l- m_qTarget\l- m_maxMotorImpulse\l- m_accMotorImpulse\l- m_flags\l- m_linCFM\l- m_linERP\l- m_angCFM\l|+ btConeTwistConstraint()\l+ btConeTwistConstraint()\l+ buildJacobian()\l+ getInfo1()\l+ getInfo1NonVirtual()\l+ getInfo2()\l+ getInfo2NonVirtual()\l+ solveConstraintObsolete()\l+ updateRHS()\l+ getRigidBodyA()\l+ getRigidBodyB()\l+ setAngularOnly()\l+ setLimit()\l+ setLimit()\l+ getAFrame()\l+ getBFrame()\l+ getSolveTwistLimit()\l+ getSolveSwingLimit()\l+ getTwistLimitSign()\l+ calcAngleInfo()\l+ calcAngleInfo2()\l+ getSwingSpan1()\l+ getSwingSpan2()\l+ getTwistSpan()\l+ getTwistAngle()\l+ isPastSwingLimit()\l+ setDamping()\l+ enableMotor()\l+ setMaxMotorImpulse()\l+ setMaxMotorImpulseNormalized()\l+ getFixThresh()\l+ setFixThresh()\l+ setMotorTarget()\l+ setMotorTargetInConstraintSpace()\l+ GetPointForAngle()\l+ setParam()\l+ setFrames()\l+ getFrameOffsetA()\l+ getFrameOffsetB()\l+ getParam()\l+ calculateSerializeBufferSize()\l+ serialize()\l# init()\l# computeConeLimitInfo()\l# computeTwistLimitInfo()\l# adjustSwingAxisToUseEllipseNormal()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{btTypedConstraint\n|+ m_userConstraintId\l+ m_userConstraintPtr\l# m_rbA\l# m_rbB\l# m_appliedImpulse\l# m_dbgDrawSize\l- m_userConstraintType\l- @262\l- m_needsFeedback\l|+ ~btTypedConstraint()\l+ btTypedConstraint()\l+ btTypedConstraint()\l+ buildJacobian()\l+ setupSolverConstraint()\l+ getInfo1()\l+ getInfo2()\l+ internalSetAppliedImpulse()\l+ internalGetAppliedImpulse()\l+ solveConstraintObsolete()\l+ getRigidBodyA()\l+ getRigidBodyB()\l+ getRigidBodyA()\l+ getRigidBodyB()\l+ getUserConstraintType()\l+ setUserConstraintType()\l+ setUserConstraintId()\l+ getUserConstraintId()\l+ setUserConstraintPtr()\l+ getUserConstraintPtr()\l+ getUid()\l+ needsFeedback()\l+ enableFeedback()\l+ getAppliedImpulse()\l+ getConstraintType()\l+ setDbgDrawSize()\l+ getDbgDrawSize()\l+ setParam()\l+ getParam()\l+ calculateSerializeBufferSize()\l+ serialize()\l# getMotorFactor()\l# getFixedBody()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/daa/classbtTypedConstraint.html",tooltip="TypedConstraint is the baseclass for Bullet constraints and vehicles."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{btTypedObject\n|+ m_objectType\l|+ btTypedObject()\l+ getObjectType()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d37/structbtTypedObject.html",tooltip="rudimentary class to provide type info"];
}
