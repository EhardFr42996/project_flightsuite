digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{SCA_ISensor\n|# m_eventmgr\l# m_pos_pulsemode\l# m_neg_pulsemode\l# m_pulse_frequency\l# m_pos_ticks\l# m_neg_ticks\l# m_invert\l# m_level\l# m_tap\l# m_reset\l# m_suspended\l# m_links\l# m_state\l# m_prev_state\l# m_linkedcontrollers\l|+ SCA_ISensor()\l+ ~SCA_ISensor()\l+ ReParent()\l+ Activate()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ Init()\l+ GetReplica()\l+ SetPulseMode()\l+ SetInvert()\l+ SetLevel()\l+ SetTap()\l+ RegisterToManager()\l+ UnregisterToManager()\l+ Replace_EventManager()\l+ ReserveController()\l+ LinkToController()\l+ UnlinkController()\l+ UnlinkAllControllers()\l+ ActivateControllers()\l+ ProcessReplica()\l+ GetNumber()\l+ GetSensorType()\l+ Suspend()\l+ IsSuspended()\l+ GetState()\l+ GetPrevState()\l+ GetPosTicks()\l+ GetNegTicks()\l+ Resume()\l+ ClrLink()\l+ IncLink()\l+ DecLink()\l+ IsNoLink()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{SCA_ILogicBrick\n|+ m_sCurrentLogicManager\l# m_gameobj\l# m_Execute_Priority\l# m_Execute_Ueber_Priority\l# m_bActive\l# m_eventval\l# m_text\l# m_name\l|+ SCA_ILogicBrick()\l+ ~SCA_ILogicBrick()\l+ SetExecutePriority()\l+ SetUeberExecutePriority()\l+ GetParent()\l+ ReParent()\l+ Relink()\l+ Delete()\l+ Calc()\l+ CalcFinal()\l+ GetText()\l+ GetNumber()\l+ GetName()\l+ SetName()\l+ IsActive()\l+ SetActive()\l+ InsertActiveQList()\l+ InsertSelfActiveQList()\l+ LessComparedTo()\l+ Replace_IScene()\l+ Replace_NetworkScene()\l# RegisterEvent()\l# RemoveEvent()\l# GetEvent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d9f/classSCA__ILogicBrick.html"];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{CValue\n|- m_pNamedPropertyArray\l- m_ValFlags\l- m_refcount\l- m_sZeroVec\l|+ CValue()\l+ Calc()\l+ CalcFinal()\l+ SetOwnerExpression()\l+ Execute()\l+ GetRefCount()\l+ AddRef()\l+ Release()\l+ SetProperty()\l+ SetProperty()\l+ GetProperty()\l+ GetProperty()\l+ GetPropertyText()\l+ GetPropertyNumber()\l+ RemoveProperty()\l+ GetPropertyNames()\l+ ClearProperties()\l+ SetPropertiesModified()\l+ IsAnyPropertyModified()\l+ GetProperty()\l+ GetPropertyCount()\l+ FindIdentifier()\l+ SetColorOperator()\l+ GetText()\l+ GetNumber()\l+ ZeroVector()\l+ GetVector3()\l+ GetName()\l+ SetName()\l+ SetValue()\l+ GetReplica()\l+ ProcessReplica()\l+ op2str()\l+ SetSelected()\l+ SetModified()\l+ SetAffected()\l+ SetReleaseRequested()\l+ SetError()\l+ SetVisible()\l+ IsModified()\l+ IsError()\l+ IsAffected()\l+ IsSelected()\l+ IsReleaseRequested()\l+ IsVisible()\l+ SetCustomFlag1()\l+ IsCustomFlag1()\l+ SetCustomFlag2()\l+ IsCustomFlag2()\l# DisableRefCount()\l# ~CValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d9c/classCValue.html"];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{PyObjectPlus\n|+ m_ignore_deprecation_warnings\l|+ PyObjectPlus()\l+ ~PyObjectPlus()\l+ InvalidateProxy()\l+ ProcessReplica()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/dbc/classPyObjectPlus.html"];
  Node5 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{SG_QList\n|# m_fqlink\l# m_bqlink\l|+ SG_QList()\l+ SG_QList()\l+ ~SG_QList()\l+ QEmpty()\l+ QAddBack()\l+ QAddFront()\l+ QRemove()\l+ QDelink()\l+ QPeek()\l+ QBack()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d05/classSG__QList.html"];
  Node6 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{SG_DList\n|# m_flink\l# m_blink\l|+ SG_DList()\l+ SG_DList()\l+ ~SG_DList()\l+ Empty()\l+ AddBack()\l+ AddFront()\l+ Remove()\l+ Delink()\l+ Peek()\l+ Back()\l+ Self()\l+ Peek()\l+ Back()\l+ Self()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d57/classSG__DList.html"];
  Node1 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{KX_ArmatureSensor\n|- m_constraint\l- m_posechannel\l- m_constraintname\l- m_type\l- m_value\l- m_result\l- m_lastresult\l|+ KX_ArmatureSensor()\l+ ~KX_ArmatureSensor()\l+ GetReplica()\l+ ReParent()\l+ Init()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ FindConstraint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/da3/classKX__ArmatureSensor.html"];
  Node1 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{KX_NetworkMessageSensor\n|- m_NetworkScene\l- m_subject\l- m_frame_message_count\l- m_IsUp\l- m_BodyList\l- m_SubjectList\l|+ KX_NetworkMessageSensor()\l+ ~KX_NetworkMessageSensor()\l+ GetReplica()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ Init()\l+ EndFrame()\l+ Replace_NetworkScene()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d03/classKX__NetworkMessageSensor.html"];
  Node1 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{KX_RaySensor\n|- m_propertyname\l- m_bFindMaterial\l- m_bXRay\l- m_distance\l- m_scene\l- m_bTriggered\l- m_axis\l- m_rayHit\l- m_hitPosition\l- m_hitObject\l- m_hitNormal\l- m_rayDirection\l|+ KX_RaySensor()\l+ ~KX_RaySensor()\l+ GetReplica()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ Init()\l+ RayHit()\l+ NeedRayCast()\l+ Replace_IScene()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/dd0/classKX__RaySensor.html"];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{KX_TouchSensor\n|# m_touchedpropname\l# m_bFindMaterial\l# m_bTouchPulse\l# m_physCtrl\l# m_bCollision\l# m_bTriggered\l# m_bLastTriggered\l# m_bLastCount\l# m_bColliderHash\l# m_bLastColliderHash\l# m_hitObject\l# m_colliders\l|+ KX_TouchSensor()\l+ ~KX_TouchSensor()\l+ GetReplica()\l+ ProcessReplica()\l+ SynchronizeTransform()\l+ Evaluate()\l+ Init()\l+ ReParent()\l+ RegisterSumo()\l+ UnregisterSumo()\l+ UnregisterToManager()\l+ NewHandleCollision()\l+ BroadPhaseFilterCollision()\l+ BroadPhaseSensorFilterCollision()\l+ GetSensorType()\l+ IsPositiveTrigger()\l+ EndFrame()\l+ GetPhysicsController()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d9e/classKX__TouchSensor.html"];
  Node10 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{KX_NearSensor\n|# m_Margin\l# m_ResetMargin\l# m_client_info\l|+ KX_NearSensor()\l+ ~KX_NearSensor()\l+ SynchronizeTransform()\l+ GetReplica()\l+ ProcessReplica()\l+ SetPhysCtrlRadius()\l+ Evaluate()\l+ ReParent()\l+ NewHandleCollision()\l+ BroadPhaseFilterCollision()\l+ BroadPhaseSensorFilterCollision()\l+ GetSensorType()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d12/classKX__NearSensor.html"];
  Node11 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{KX_RadarSensor\n|# m_coneradius\l# m_coneheight\l# m_axis\l# m_cone_origin\l# m_cone_target\l|+ KX_RadarSensor()\l+ KX_RadarSensor()\l+ ~KX_RadarSensor()\l+ SynchronizeTransform()\l+ GetReplica()\l+ GetSensorType()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d4f/classKX__RadarSensor.html"];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{SCA_ActuatorSensor\n|# m_actuator\l- m_checkactname\l- m_lastresult\l- m_midresult\l|+ SCA_ActuatorSensor()\l+ ~SCA_ActuatorSensor()\l+ GetReplica()\l+ Init()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ ReParent()\l+ Update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/dff/classSCA__ActuatorSensor.html"];
  Node1 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{SCA_AlwaysSensor\n|- m_alwaysresult\l|+ SCA_AlwaysSensor()\l+ ~SCA_AlwaysSensor()\l+ GetReplica()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ Init()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d18/classSCA__AlwaysSensor.html"];
  Node1 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{SCA_DelaySensor\n|- m_lastResult\l- m_repeat\l- m_delay\l- m_duration\l- m_frameCount\l|+ SCA_DelaySensor()\l+ ~SCA_DelaySensor()\l+ GetReplica()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ Init()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d54/classSCA__DelaySensor.html"];
  Node1 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{SCA_JoystickSensor\n|- m_axis\l- m_axisf\l- m_button\l- m_buttonf\l- m_hat\l- m_hatf\l- m_precision\l- m_istrig\l- m_istrig_prev\l- m_joymode\l- m_joyindex\l- m_bAllEvents\l|+ SCA_JoystickSensor()\l+ ~SCA_JoystickSensor()\l+ GetReplica()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ Init()\l+ GetJoyIndex()\l- isValid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d0d/classSCA__JoystickSensor.html"];
  Node1 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{SCA_KeyboardSensor\n|- m_hotkey\l- m_qual\l- m_qual2\l- m_val\l- m_bAllKeys\l- m_targetprop\l- m_toggleprop\l|+ SCA_KeyboardSensor()\l+ ~SCA_KeyboardSensor()\l+ GetReplica()\l+ Init()\l+ GetHotkey()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ TriggerOnAllKeys()\l+ SCA_KeyboardSensor()\l+ ~SCA_KeyboardSensor()\l+ GetReplica()\l+ Init()\l+ GetHotkey()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ TriggerOnAllKeys()\l+ SCA_KeyboardSensor()\l+ ~SCA_KeyboardSensor()\l+ GetReplica()\l+ Init()\l+ GetHotkey()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ TriggerOnAllKeys()\l- LogKeystrokes()\l- AddToTargetProp()\l- IsShifted()\l- LogKeystrokes()\l- AddToTargetProp()\l- IsShifted()\l- LogKeystrokes()\l- AddToTargetProp()\l- IsShifted()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/dbf/classSCA__KeyboardSensor.html"];
  Node1 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node18 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node18 [label="{SCA_MouseSensor\n|- m_mousemode\l- m_triggermode\l- m_val\l- m_hotkey\l- m_x\l- m_y\l|+ isValid()\l+ SCA_MouseSensor()\l+ ~SCA_MouseSensor()\l+ GetReplica()\l+ Evaluate()\l+ Init()\l+ IsPositiveTrigger()\l+ GetModeKey()\l+ GetHotKey()\l+ setX()\l+ setY()\l+ UpdateHotkey()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/dd3/classSCA__MouseSensor.html"];
  Node18 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node19 [label="{KX_MouseFocusSensor\n|+ m_hitObject\l+ m_hitObject_Last\l- m_focusmode\l- m_mouse_over_in_previous_frame\l- m_bTouchPulse\l- m_positive_event\l- m_hitPosition\l- m_prevTargetPoint\l- m_prevSourcePoint\l- m_hitNormal\l- m_hitUV\l- m_kxscene\l- m_kxengine\l|+ KX_MouseFocusSensor()\l+ ~KX_MouseFocusSensor()\l+ GetReplica()\l+ Replace_IScene()\l+ Evaluate()\l+ Init()\l+ IsPositiveTrigger()\l+ RayHit()\l+ NeedRayCast()\l+ RaySource()\l+ RayTarget()\l+ HitPosition()\l+ HitNormal()\l+ HitUV()\l- ParentObjectHasFocusCamera()\l- ParentObjectHasFocus()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d95/classKX__MouseFocusSensor.html"];
  Node1 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node20 [label="{SCA_PropertySensor\n|+ S_KX_PROPSENSOR_EQ_STRING\l- m_checktype\l- m_checkpropval\l- m_checkpropmaxval\l- m_checkpropname\l- m_previoustext\l- m_lastresult\l- m_recentresult\l- m_range_expr\l|+ SCA_PropertySensor()\l+ Delete()\l+ ~SCA_PropertySensor()\l+ GetReplica()\l+ Init()\l+ PrecalculateRangeExpression()\l+ CheckPropertyCondition()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ FindIdentifier()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d38/classSCA__PropertySensor.html"];
  Node1 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node21 [label="{SCA_RandomSensor\n|- m_currentDraw\l- m_iteration\l- m_interval\l- m_basegenerator\l- m_lastdraw\l|+ SCA_RandomSensor()\l+ ~SCA_RandomSensor()\l+ GetReplica()\l+ ProcessReplica()\l+ Evaluate()\l+ IsPositiveTrigger()\l+ Init()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/da8/classSCA__RandomSensor.html"];
}
