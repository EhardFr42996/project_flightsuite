digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{btCollisionAlgorithm\n|# m_dispatcher\l|+ btCollisionAlgorithm()\l+ btCollisionAlgorithm()\l+ ~btCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{btActivatingCollisionAlgorithm\n||+ btActivatingCollisionAlgorithm()\l+ btActivatingCollisionAlgorithm()\l+ ~btActivatingCollisionAlgorithm()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d98/classbtActivatingCollisionAlgorithm.html",tooltip="This class is not enabled yet (work-in-progress) to more aggressively activate objects."];
  Node2 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{btBox2dBox2dCollisionAlgorithm\n|- m_ownManifold\l- m_manifoldPtr\l|+ btBox2dBox2dCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ btBox2dBox2dCollisionAlgorithm()\l+ ~btBox2dBox2dCollisionAlgorithm()\l+ getAllContactManifolds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/deb/classbtBox2dBox2dCollisionAlgorithm.html",tooltip="box-box collision detection"];
  Node2 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{btBoxBoxCollisionAlgorithm\n|- m_ownManifold\l- m_manifoldPtr\l|+ btBoxBoxCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ btBoxBoxCollisionAlgorithm()\l+ ~btBoxBoxCollisionAlgorithm()\l+ getAllContactManifolds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/dd6/classbtBoxBoxCollisionAlgorithm.html",tooltip="box-box collision detection"];
  Node2 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{btCompoundCollisionAlgorithm\n|- m_childCollisionAlgorithms\l- m_isSwapped\l- m_sharedManifold\l- m_ownsManifold\l- m_compoundShapeRevision\l|+ btCompoundCollisionAlgorithm()\l+ ~btCompoundCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l- removeChildAlgorithms()\l- preallocateChildAlgorithms()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d49/classbtCompoundCollisionAlgorithm.html",tooltip="btCompoundCollisionAlgorithm supports collision between CompoundCollisionShapes and other collision s..."];
  Node2 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{btConvex2dConvex2dAlgorithm\n|- m_simplexSolver\l- m_pdSolver\l- m_ownManifold\l- m_manifoldPtr\l- m_lowLevelOfDetail\l- m_numPerturbationIterations\l- m_minimumPointsPerturbationThreshold\l|+ btConvex2dConvex2dAlgorithm()\l+ ~btConvex2dConvex2dAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l+ setLowLevelOfDetail()\l+ getManifold()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d01/classbtConvex2dConvex2dAlgorithm.html"];
  Node2 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{btConvexConcaveCollisionAlgorithm\n|- m_isSwapped\l- m_btConvexTriangleCallback\l|+ btConvexConcaveCollisionAlgorithm()\l+ ~btConvexConcaveCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l+ clearCache()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/dab/classbtConvexConcaveCollisionAlgorithm.html",tooltip="btConvexConcaveCollisionAlgorithm supports collision between convex shapes and (concave) trianges mes..."];
  Node2 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{btConvexConvexAlgorithm\n|- m_simplexSolver\l- m_pdSolver\l- m_ownManifold\l- m_manifoldPtr\l- m_lowLevelOfDetail\l- m_numPerturbationIterations\l- m_minimumPointsPerturbationThreshold\l|+ btConvexConvexAlgorithm()\l+ ~btConvexConvexAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l+ setLowLevelOfDetail()\l+ getManifold()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d81/classbtConvexConvexAlgorithm.html"];
  Node2 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{btGImpactCollisionAlgorithm\n|# m_convex_algorithm\l# m_manifoldPtr\l# m_resultOut\l# m_dispatchInfo\l# m_triface0\l# m_part0\l# m_triface1\l# m_part1\l|# newContactManifold()\l# destroyConvexAlgorithm()\l# destroyContactManifolds()\l# clearCache()\l# getLastManifold()\l# checkManifold()\l# newAlgorithm()\l# checkConvexAlgorithm()\l# addContactPoint()\l* collide_gjk_triangles()\l* collide_sat_triangles()\l* shape_vs_shape_collision()\l* convex_vs_convex_collision()\l* gimpact_vs_gimpact_find_pairs()\l* gimpact_vs_shape_find_pairs()\l* gimpacttrimeshpart_vs_plane_collision()\l* btGImpactCollisionAlgorithm()\l* ~btGImpactCollisionAlgorithm()\l* processCollision()\l* calculateTimeOfImpact()\l* getAllContactManifolds()\l* gimpact_vs_gimpact()\l* gimpact_vs_shape()\l* gimpact_vs_compoundshape()\l* gimpact_vs_concave()\l* setFace0()\l* getFace0()\l* setFace1()\l* getFace1()\l* setPart0()\l* getPart0()\l* setPart1()\l* getPart1()\l* registerAlgorithm()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/df3/classbtGImpactCollisionAlgorithm.html",tooltip="Collision Algorithm for GImpact Shapes."];
  Node2 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{btSphereBoxCollisionAlgorithm\n|- m_ownManifold\l- m_manifoldPtr\l- m_isSwapped\l|+ btSphereBoxCollisionAlgorithm()\l+ ~btSphereBoxCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l+ getSphereDistance()\l+ getSpherePenetration()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d03/classbtSphereBoxCollisionAlgorithm.html"];
  Node2 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{btSphereSphereCollisionAlgorithm\n|- m_ownManifold\l- m_manifoldPtr\l|+ btSphereSphereCollisionAlgorithm()\l+ btSphereSphereCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l+ ~btSphereSphereCollisionAlgorithm()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/df8/classbtSphereSphereCollisionAlgorithm.html"];
  Node2 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{btSphereTriangleCollisionAlgorithm\n|- m_ownManifold\l- m_manifoldPtr\l- m_swapped\l|+ btSphereTriangleCollisionAlgorithm()\l+ btSphereTriangleCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l+ ~btSphereTriangleCollisionAlgorithm()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d33/classbtSphereTriangleCollisionAlgorithm.html"];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{btConvexPlaneCollisionAlgorithm\n|- m_ownManifold\l- m_manifoldPtr\l- m_isSwapped\l- m_numPerturbationIterations\l- m_minimumPointsPerturbationThreshold\l|+ btConvexPlaneCollisionAlgorithm()\l+ ~btConvexPlaneCollisionAlgorithm()\l+ processCollision()\l+ collideSingleContact()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d6d/classbtConvexPlaneCollisionAlgorithm.html"];
  Node1 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{btEmptyAlgorithm\n|+ ATTRIBUTE_ALIGNED\l|+ btEmptyAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da5/classbtEmptyAlgorithm.html"];
  Node1 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{btSoftBodyConcaveCollisionAlgorithm\n|- m_isSwapped\l- m_btSoftBodyTriangleCallback\l|+ btSoftBodyConcaveCollisionAlgorithm()\l+ ~btSoftBodyConcaveCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l+ clearCache()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d67/classbtSoftBodyConcaveCollisionAlgorithm.html",tooltip="btSoftBodyConcaveCollisionAlgorithm supports collision between soft body shapes and (concave) triange..."];
  Node1 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{btSoftRigidCollisionAlgorithm\n|- m_softBody\l- m_rigidCollisionObject\l- m_isSwapped\l|+ btSoftRigidCollisionAlgorithm()\l+ ~btSoftRigidCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/dba/classbtSoftRigidCollisionAlgorithm.html",tooltip="btSoftRigidCollisionAlgorithm provides collision detection between btSoftBody and btRigidBody..."];
  Node1 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{btSoftSoftCollisionAlgorithm\n|- m_ownManifold\l- m_manifoldPtr\l- m_softBody0\l- m_softBody1\l|+ btSoftSoftCollisionAlgorithm()\l+ processCollision()\l+ calculateTimeOfImpact()\l+ getAllContactManifolds()\l+ btSoftSoftCollisionAlgorithm()\l+ ~btSoftSoftCollisionAlgorithm()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d71/classbtSoftSoftCollisionAlgorithm.html",tooltip="collision detection between two btSoftBody shapes"];
}
