digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{gim_pair_set\n||+ gim_pair_set()\l+ push_pair()\l+ push_pair_inv()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{gim_array\< GIM_PAIR \>\n|+ m_data\l+ m_size\l+ m_allocated_size\l|+ destroyData()\l+ resizeData()\l+ growingCheck()\l+ reserve()\l+ clear_range()\l+ clear()\l+ clear_memory()\l+ gim_array()\l+ gim_array()\l+ ~gim_array()\l+ size()\l+ max_size()\l+ operator[]()\l+ operator[]()\l+ pointer()\l+ pointer()\l+ get_pointer_at()\l+ get_pointer_at()\l+ at()\l+ at()\l+ front()\l+ front()\l+ back()\l+ back()\l+ swap()\l+ push_back()\l+ push_back_mem()\l+ push_back_memcpy()\l+ pop_back()\l+ pop_back_mem()\l+ erase()\l+ erase_sorted_mem()\l+ erase_sorted()\l+ insert_mem()\l+ insert()\l+ resize()\l+ refit()\l* m_data\l* m_size\l* m_allocated_size\l* destroyData()\l* resizeData()\l* growingCheck()\l* reserve()\l* clear_range()\l* clear()\l* clear_memory()\l* gim_array()\l* gim_array()\l* ~gim_array()\l* size()\l* max_size()\l* operator[]()\l* operator[]()\l* pointer()\l* pointer()\l* get_pointer_at()\l* get_pointer_at()\l* at()\l* at()\l* front()\l* front()\l* back()\l* back()\l* swap()\l* push_back()\l* push_back_mem()\l* push_back_memcpy()\l* pop_back()\l* pop_back_mem()\l* erase()\l* erase_sorted_mem()\l* erase_sorted()\l* insert_mem()\l* insert()\l* resize()\l* refit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d77/classgim__array.html"];
  Node3 -> Node2 [dir=back,color="orange",fontsize="10",style="dashed",label="\< GIM_PAIR \>",fontname="Helvetica"];
  Node3 [label="{gim_array\< T \>\n|+ m_data\l+ m_size\l+ m_allocated_size\l|+ destroyData()\l+ resizeData()\l+ growingCheck()\l+ reserve()\l+ clear_range()\l+ clear()\l+ clear_memory()\l+ gim_array()\l+ gim_array()\l+ ~gim_array()\l+ size()\l+ max_size()\l+ operator[]()\l+ operator[]()\l+ pointer()\l+ pointer()\l+ get_pointer_at()\l+ get_pointer_at()\l+ at()\l+ at()\l+ front()\l+ front()\l+ back()\l+ back()\l+ swap()\l+ push_back()\l+ push_back_mem()\l+ push_back_memcpy()\l+ pop_back()\l+ pop_back_mem()\l+ erase()\l+ erase_sorted_mem()\l+ erase_sorted()\l+ insert_mem()\l+ insert()\l+ resize()\l+ refit()\l* m_data\l* m_size\l* m_allocated_size\l* destroyData()\l* resizeData()\l* growingCheck()\l* reserve()\l* clear_range()\l* clear()\l* clear_memory()\l* gim_array()\l* gim_array()\l* ~gim_array()\l* size()\l* max_size()\l* operator[]()\l* operator[]()\l* pointer()\l* pointer()\l* get_pointer_at()\l* get_pointer_at()\l* at()\l* at()\l* front()\l* front()\l* back()\l* back()\l* swap()\l* push_back()\l* push_back_mem()\l* push_back_memcpy()\l* pop_back()\l* pop_back_mem()\l* erase()\l* erase_sorted_mem()\l* erase_sorted()\l* insert_mem()\l* insert()\l* resize()\l* refit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d77/classgim__array.html",tooltip="Very simple array container with fast access and simd memory."];
}
