digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{btConvexInternalShape\n|# m_localScaling\l# m_implicitShapeDimensions\l# m_collisionMargin\l# m_padding\l|+ ~btConvexInternalShape()\l+ localGetSupportingVertex()\l+ getImplicitShapeDimensions()\l+ setImplicitShapeDimensions()\l+ getAabb()\l+ getAabbSlow()\l+ setLocalScaling()\l+ getLocalScaling()\l+ getLocalScalingNV()\l+ setMargin()\l+ getMargin()\l+ getMarginNV()\l+ getNumPreferredPenetrationDirections()\l+ getPreferredPenetrationDirection()\l+ calculateSerializeBufferSize()\l+ serialize()\l# btConvexInternalShape()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{btCapsuleShape\n|# m_upAxis\l|+ btCapsuleShape()\l+ calculateLocalInertia()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ setMargin()\l+ getAabb()\l+ getName()\l+ getUpAxis()\l+ getRadius()\l+ getHalfHeight()\l+ setLocalScaling()\l+ calculateSerializeBufferSize()\l+ serialize()\l# btCapsuleShape()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d17/classbtCapsuleShape.html"];
  Node2 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{btCapsuleShapeX\n||+ btCapsuleShapeX()\l+ getName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/db8/classbtCapsuleShapeX.html"];
  Node2 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{btCapsuleShapeZ\n||+ btCapsuleShapeZ()\l+ getName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d0e/classbtCapsuleShapeZ.html"];
  Node1 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{btConeShape\n|- m_sinAngle\l- m_radius\l- m_height\l- m_coneIndices\l|+ btConeShape()\l+ localGetSupportingVertex()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ getRadius()\l+ getHeight()\l+ calculateLocalInertia()\l+ getName()\l+ setConeUpIndex()\l+ getConeUpIndex()\l+ setLocalScaling()\l- coneLocalSupport()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d5e/classbtConeShape.html",tooltip="The btConeShape implements a cone shape primitive, centered around the origin and aligned with the Y ..."];
  Node5 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{btConeShapeX\n||+ btConeShapeX()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d97/classbtConeShapeX.html",tooltip="btConeShape implements a Cone shape, around the X axis"];
  Node5 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{btConeShapeZ\n||+ btConeShapeZ()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/df2/classbtConeShapeZ.html",tooltip="btConeShapeZ implements a Cone shape, around the Z axis"];
  Node1 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{btConvexInternalAabbCachingShape\n|- m_localAabbMin\l- m_localAabbMax\l- m_isLocalAabbValid\l|+ setLocalScaling()\l+ getAabb()\l+ recalcLocalAabb()\l# btConvexInternalAabbCachingShape()\l# setCachedLocalAabb()\l# getCachedLocalAabb()\l# getNonvirtualAabb()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d2c/classbtConvexInternalAabbCachingShape.html",tooltip="btConvexInternalAabbCachingShape adds local aabb caching for convex shapes, to avoid expensive boundi..."];
  Node8 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{btMultiSphereShape\n|- m_localPositionArray\l- m_radiArray\l|+ btMultiSphereShape()\l+ calculateLocalInertia()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ getSphereCount()\l+ getSpherePosition()\l+ getSphereRadius()\l+ getName()\l+ calculateSerializeBufferSize()\l+ serialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d51/classbtMultiSphereShape.html"];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{btCylinderShape\n|# m_upAxis\l|+ getHalfExtentsWithMargin()\l+ getHalfExtentsWithoutMargin()\l+ btCylinderShape()\l+ getAabb()\l+ calculateLocalInertia()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ setMargin()\l+ localGetSupportingVertex()\l+ getUpAxis()\l+ getRadius()\l+ setLocalScaling()\l+ getName()\l+ calculateSerializeBufferSize()\l+ serialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d51/classbtCylinderShape.html",tooltip="The btCylinderShape class implements a cylinder shape primitive, centered around the origin..."];
  Node10 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{btCylinderShapeX\n||+ btCylinderShapeX()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ getName()\l+ getRadius()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dde/classbtCylinderShapeX.html"];
  Node10 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{btCylinderShapeZ\n||+ btCylinderShapeZ()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ getName()\l+ getRadius()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d37/classbtCylinderShapeZ.html"];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{btMinkowskiSumShape\n|- m_transA\l- m_transB\l- m_shapeA\l- m_shapeB\l|+ btMinkowskiSumShape()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ calculateLocalInertia()\l+ setTransformA()\l+ setTransformB()\l+ getTransformA()\l+ GetTransformB()\l+ getMargin()\l+ getShapeA()\l+ getShapeB()\l+ getName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/de8/classbtMinkowskiSumShape.html",tooltip="The btMinkowskiSumShape is only for advanced users. This shape represents implicit based minkowski su..."];
  Node1 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{btPolyhedralConvexShape\n||+ btPolyhedralConvexShape()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ calculateLocalInertia()\l+ getNumVertices()\l+ getNumEdges()\l+ getEdge()\l+ getVertex()\l+ getNumPlanes()\l+ getPlane()\l+ isInside()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d29/classbtPolyhedralConvexShape.html",tooltip="The btPolyhedralConvexShape is an internal interface class for polyhedral convex shapes."];
  Node14 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{btBox2dShape\n|- m_centroid\l- m_vertices\l- m_normals\l|+ getHalfExtentsWithMargin()\l+ getHalfExtentsWithoutMargin()\l+ localGetSupportingVertex()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ btBox2dShape()\l+ setMargin()\l+ setLocalScaling()\l+ getAabb()\l+ calculateLocalInertia()\l+ getVertexCount()\l+ getNumVertices()\l+ getVertices()\l+ getNormals()\l+ getPlane()\l+ getCentroid()\l+ getNumPlanes()\l+ getNumEdges()\l+ getVertex()\l+ getPlaneEquation()\l+ getEdge()\l+ isInside()\l+ getName()\l+ getNumPreferredPenetrationDirections()\l+ getPreferredPenetrationDirection()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dc3/classbtBox2dShape.html",tooltip="The btBox2dShape is a box primitive around the origin, its sides axis aligned with length specified b..."];
  Node14 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{btBoxShape\n||+ getHalfExtentsWithMargin()\l+ getHalfExtentsWithoutMargin()\l+ localGetSupportingVertex()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ btBoxShape()\l+ setMargin()\l+ setLocalScaling()\l+ getAabb()\l+ calculateLocalInertia()\l+ getPlane()\l+ getNumPlanes()\l+ getNumVertices()\l+ getNumEdges()\l+ getVertex()\l+ getPlaneEquation()\l+ getEdge()\l+ isInside()\l+ getName()\l+ getNumPreferredPenetrationDirections()\l+ getPreferredPenetrationDirection()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/df8/classbtBoxShape.html",tooltip="The btBoxShape is a box primitive around the origin, its sides axis aligned with length specified by ..."];
  Node14 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{btPolyhedralConvexAabbCachingShape\n|- m_localAabbMin\l- m_localAabbMax\l- m_isLocalAabbValid\l|+ btPolyhedralConvexAabbCachingShape()\l+ getNonvirtualAabb()\l+ setLocalScaling()\l+ getAabb()\l+ recalcLocalAabb()\l# setCachedLocalAabb()\l# getCachedLocalAabb()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/dd1/classbtPolyhedralConvexAabbCachingShape.html",tooltip="The btPolyhedralConvexAabbCachingShape adds aabb caching to the btPolyhedralConvexShape."];
  Node17 -> Node18 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node18 [label="{btBU_Simplex1to4\n|# m_numVertices\l# m_vertices\l|+ btBU_Simplex1to4()\l+ btBU_Simplex1to4()\l+ btBU_Simplex1to4()\l+ btBU_Simplex1to4()\l+ btBU_Simplex1to4()\l+ reset()\l+ getAabb()\l+ addVertex()\l+ getNumVertices()\l+ getNumEdges()\l+ getEdge()\l+ getVertex()\l+ getNumPlanes()\l+ getPlane()\l+ getIndex()\l+ isInside()\l+ getName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d81/classbtBU__Simplex1to4.html",tooltip="The btBU_Simplex1to4 implements tetrahedron, triangle, line, vertex collision shapes. In most cases it is better to use btConvexHullShape instead."];
  Node18 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node19 [label="{btTetrahedronShapeEx\n||+ btTetrahedronShapeEx()\l+ setVertices()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/db5/classbtTetrahedronShapeEx.html",tooltip="Helper class for tetrahedrons."];
  Node17 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node20 [label="{btConvexTriangleMeshShape\n|- m_stridingMesh\l|+ btConvexTriangleMeshShape()\l+ getMeshInterface()\l+ getMeshInterface()\l+ localGetSupportingVertex()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ getName()\l+ getNumVertices()\l+ getNumEdges()\l+ getEdge()\l+ getVertex()\l+ getNumPlanes()\l+ getPlane()\l+ isInside()\l+ setLocalScaling()\l+ getLocalScaling()\l+ calculatePrincipalAxisTransform()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d09/classbtConvexTriangleMeshShape.html"];
  Node1 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node21 [label="{btSoftClusterCollisionShape\n|+ m_cluster\l|+ btSoftClusterCollisionShape()\l+ localGetSupportingVertex()\l+ localGetSupportingVertexWithoutMargin()\l+ batchedUnitVectorGetSupportingVertexWithoutMargin()\l+ calculateLocalInertia()\l+ getAabb()\l+ getShapeType()\l+ getName()\l+ setMargin()\l+ getMargin()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/de3/classbtSoftClusterCollisionShape.html"];
}
