digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{btHinge2Constraint\n|# m_anchor\l# m_axis1\l# m_axis2\l|+ btHinge2Constraint()\l+ getAnchor()\l+ getAnchor2()\l+ getAxis1()\l+ getAxis2()\l+ getAngle1()\l+ getAngle2()\l+ setUpperLimit()\l+ setLowerLimit()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{btGeneric6DofSpringConstraint\n|# m_springEnabled\l# m_equilibriumPoint\l# m_springStiffness\l# m_springDamping\l|+ btGeneric6DofSpringConstraint()\l+ enableSpring()\l+ setStiffness()\l+ setDamping()\l+ setEquilibriumPoint()\l+ setEquilibriumPoint()\l+ setEquilibriumPoint()\l+ setAxis()\l+ getInfo2()\l+ calculateSerializeBufferSize()\l+ serialize()\l# internalUpdateSprings()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d7b/classbtGeneric6DofSpringConstraint.html",tooltip="Generic 6 DOF constraint that allows to set spring motors to any translational and rotational DOF..."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{btGeneric6DofConstraint\n|+ m_useSolveConstraintObsolete\l# m_frameInA\l# m_frameInB\l# m_jacLinear\l# m_jacAng\l# m_linearLimits\l# m_angularLimits\l# m_timeStep\l# m_calculatedTransformA\l# m_calculatedTransformB\l# m_calculatedAxisAngleDiff\l# m_calculatedAxis\l# m_calculatedLinearDiff\l# m_factA\l# m_factB\l# m_hasStaticBody\l# m_AnchorPos\l# m_useLinearReferenceFrameA\l# m_useOffsetForConstraintFrame\l# m_flags\l|+ btGeneric6DofConstraint()\l+ btGeneric6DofConstraint()\l+ calculateTransforms()\l+ calculateTransforms()\l+ getCalculatedTransformA()\l+ getCalculatedTransformB()\l+ getFrameOffsetA()\l+ getFrameOffsetB()\l+ getFrameOffsetA()\l+ getFrameOffsetB()\l+ buildJacobian()\l+ getInfo1()\l+ getInfo1NonVirtual()\l+ getInfo2()\l+ getInfo2NonVirtual()\l+ updateRHS()\l+ getAxis()\l+ getAngle()\l+ getRelativePivotPosition()\l+ setFrames()\l+ testAngularLimitMotor()\l+ setLinearLowerLimit()\l+ getLinearLowerLimit()\l+ setLinearUpperLimit()\l+ getLinearUpperLimit()\l+ setAngularLowerLimit()\l+ getAngularLowerLimit()\l+ setAngularUpperLimit()\l+ getAngularUpperLimit()\l+ getRotationalLimitMotor()\l+ getTranslationalLimitMotor()\l+ setLimit()\l+ isLimited()\l+ calcAnchorPos()\l+ get_limit_motor_info2()\l+ getUseFrameOffset()\l+ setUseFrameOffset()\l+ setParam()\l+ getParam()\l+ setAxis()\l+ calculateSerializeBufferSize()\l+ serialize()\l# operator=()\l# setAngularLimits()\l# setLinearLimits()\l# buildLinearJacobian()\l# buildAngularJacobian()\l# calculateLinearInfo()\l# calculateAngleInfo()\l* m_frameInA\l* m_frameInB\l* m_jacLinear\l* m_jacAng\l* m_linearLimits\l* m_angularLimits\l* m_timeStep\l* m_calculatedTransformA\l* m_calculatedTransformB\l* m_calculatedAxisAngleDiff\l* m_calculatedAxis\l* m_calculatedLinearDiff\l* m_factA\l* m_factB\l* m_hasStaticBody\l* m_AnchorPos\l* m_useLinearReferenceFrameA\l* m_useOffsetForConstraintFrame\l* m_flags\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/dd6/classbtGeneric6DofConstraint.html",tooltip="btGeneric6DofConstraint between two rigidbodies each with a pivotpoint that descibes the axis locatio..."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{btTypedConstraint\n|+ m_userConstraintId\l+ m_userConstraintPtr\l# m_rbA\l# m_rbB\l# m_appliedImpulse\l# m_dbgDrawSize\l- m_userConstraintType\l- @262\l- m_needsFeedback\l|+ ~btTypedConstraint()\l+ btTypedConstraint()\l+ btTypedConstraint()\l+ buildJacobian()\l+ setupSolverConstraint()\l+ getInfo1()\l+ getInfo2()\l+ internalSetAppliedImpulse()\l+ internalGetAppliedImpulse()\l+ solveConstraintObsolete()\l+ getRigidBodyA()\l+ getRigidBodyB()\l+ getRigidBodyA()\l+ getRigidBodyB()\l+ getUserConstraintType()\l+ setUserConstraintType()\l+ setUserConstraintId()\l+ getUserConstraintId()\l+ setUserConstraintPtr()\l+ getUserConstraintPtr()\l+ getUid()\l+ needsFeedback()\l+ enableFeedback()\l+ getAppliedImpulse()\l+ getConstraintType()\l+ setDbgDrawSize()\l+ getDbgDrawSize()\l+ setParam()\l+ getParam()\l+ calculateSerializeBufferSize()\l+ serialize()\l# getMotorFactor()\l# getFixedBody()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/daa/classbtTypedConstraint.html",tooltip="TypedConstraint is the baseclass for Bullet constraints and vehicles."];
  Node5 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{btTypedObject\n|+ m_objectType\l|+ btTypedObject()\l+ getObjectType()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d37/structbtTypedObject.html",tooltip="rudimentary class to provide type info"];
}
