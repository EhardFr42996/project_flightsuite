digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{btSimpleDynamicsWorld\n|# m_constraintSolver\l# m_ownsConstraintSolver\l# m_gravity\l|+ btSimpleDynamicsWorld()\l+ ~btSimpleDynamicsWorld()\l+ stepSimulation()\l+ setGravity()\l+ getGravity()\l+ addRigidBody()\l+ addRigidBody()\l+ removeRigidBody()\l+ debugDrawWorld()\l+ addAction()\l+ removeAction()\l+ removeCollisionObject()\l+ updateAabbs()\l+ synchronizeMotionStates()\l+ setConstraintSolver()\l+ getConstraintSolver()\l+ getWorldType()\l+ clearForces()\l# predictUnconstraintMotion()\l# integrateTransforms()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{btDynamicsWorld\n|# m_internalTickCallback\l# m_internalPreTickCallback\l# m_worldUserInfo\l# m_solverInfo\l|+ btDynamicsWorld()\l+ ~btDynamicsWorld()\l+ stepSimulation()\l+ debugDrawWorld()\l+ addConstraint()\l+ removeConstraint()\l+ addAction()\l+ removeAction()\l+ setGravity()\l+ getGravity()\l+ synchronizeMotionStates()\l+ addRigidBody()\l+ addRigidBody()\l+ removeRigidBody()\l+ setConstraintSolver()\l+ getConstraintSolver()\l+ getNumConstraints()\l+ getConstraint()\l+ getConstraint()\l+ getWorldType()\l+ clearForces()\l+ setInternalTickCallback()\l+ setWorldUserInfo()\l+ getWorldUserInfo()\l+ getSolverInfo()\l+ addVehicle()\l+ removeVehicle()\l+ addCharacter()\l+ removeCharacter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dc3/classbtDynamicsWorld.html",tooltip="The btDynamicsWorld is the interface class for several dynamics implementation, basic, discrete, parallel, and continuous etc."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{btCollisionWorld\n|# m_collisionObjects\l# m_dispatcher1\l# m_dispatchInfo\l# m_stackAlloc\l# m_broadphasePairCache\l# m_debugDrawer\l# m_forceUpdateAllAabbs\l|+ btCollisionWorld()\l+ ~btCollisionWorld()\l+ setBroadphase()\l+ getBroadphase()\l+ getBroadphase()\l+ getPairCache()\l+ getDispatcher()\l+ getDispatcher()\l+ updateSingleAabb()\l+ updateAabbs()\l+ setDebugDrawer()\l+ getDebugDrawer()\l+ debugDrawWorld()\l+ debugDrawObject()\l+ getNumCollisionObjects()\l+ rayTest()\l+ convexSweepTest()\l+ contactTest()\l+ contactPairTest()\l+ addCollisionObject()\l+ getCollisionObjectArray()\l+ getCollisionObjectArray()\l+ removeCollisionObject()\l+ performDiscreteCollisionDetection()\l+ getDispatchInfo()\l+ getDispatchInfo()\l+ getForceUpdateAllAabbs()\l+ setForceUpdateAllAabbs()\l+ serialize()\l+ rayTestSingle()\l+ objectQuerySingle()\l# serializeCollisionObjects()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/def/classbtCollisionWorld.html",tooltip="CollisionWorld is interface and container for the collision detection."];
}
